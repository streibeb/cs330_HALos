comment        :Quicksort
comment        :Author: Robert J. Hilderman
comment        :Copyright 2015


variable       :a
a              :integer
a              :32


comment        :The swap function

function       :swap
variable       :i
i              :integer
variable       :j
j              :integer
variable       :temp
temp           :integer
put            :argument
set            :i
put            :argument
set            :j
put            :argument
reference      :a
put            :a<i>
set            :temp
put            :a<j>
set            :a<i>
put            :temp
set            :a<j>
return         :


comment        :The determinepivot function

function       :determinepivot
variable       :left
left           :integer
variable       :right
right          :integer
variable       :center
center         :integer
put            :argument
set            :right
put            :argument
set            :left
put            :argument
reference      :a
put            :left
put            :right
add            :
put            :2
divide         :
set            :center
label          :determinepivot_compare1
put            :a<center>
put            :a<left>
compare        :
jumpequal      :determinepivot_compare2
jumpgreater    :determinepivot_compare2
put            :a
put            :left
put            :center
call           :swap
label          :determinepivot_compare2
put            :a<right>
put            :a<left>
compare        :
jumpequal      :determinepivot_compare3
jumpgreater    :determinepivot_compare3
put            :a
put            :left
put            :right
call           :swap
label          :determinepivot_compare3
put            :a<right>
put            :a<center>
compare        :
jumpequal      :determinepivot_movepivotoutofway
jumpgreater    :determinepivot_movepivotoutofway
put            :a
put            :center
put            :right
call           :swap
label          :determinepivot_movepivotoutofway
put            :right
put            :1
subtract       :
set            :right
put            :a
put            :center
put            :right
call           :swap
return         :


comment        :The partition function

function       :partition
variable       :left
left           :integer
variable       :right
right          :integer
put            :argument
set            :right
put            :argument
set            :left
put            :argument
reference      :a
put            :a
put            :left
put            :right
call           :determinepivot
variable       :i
i              :integer
variable       :j
j              :integer
variable       :pivot
pivot          :integer
put            :left
set            :i
put            :right
put            :1
subtract       :
set            :j
put            :j
set            :pivot
label          :partition_while1
label          :partition_while2
put            :i
put            :1
add            :
set            :i
put            :a<i>
put            :a<pivot>
compare        :
jumpless       :partition_while2
label          :partition_while3
put            :j
put            :1
subtract       :
set            :j
put            :a<pivot>
put            :a<j>
compare        :
jumpless       :partition_while3
put            :i
put            :j
compare        :
jumpequal      :partition_while1_end
jumpgreater    :partition_while1_end
put            :a
put            :i
put            :j
call           :swap
jump           :partition_while1
label          :partition_while1_end
put            :a
put            :i
put            :pivot
call           :swap
return         :i


comment        :This function does a recursive quicksort
comment        :of an array.

function       :quicksort
variable       :left
left           :integer
variable       :right
right          :integer
variable       :pivot
pivot          :integer
put            :argument
set            :right
put            :argument
set            :left
put            :argument
reference      :a
put            :left
put            :3
add            :
put            :right
compare        :
jumpequal      :quicksort_continue
jumpless       :quicksort_continue
put            :a
put            :left
put            :right
call           :insertionsort
return         :
label          :quicksort_continue
put            :a
put            :left
put            :right
call           :partition
set            :pivot
put            :a
put            :left
put            :pivot
put            :1
subtract       :
call           :quicksort
put            :a
put            :pivot
put            :1
add            :
put            :right
call           :quicksort
return         :


comment        :This function does an iterative insertion sort
comment        :of an array.

function       :insertionsort
variable       :left
left           :integer
variable       :right
right          :integer
variable       :temp
temp           :integer
variable       :i
i              :integer
variable       :iminus1
iminus1        :integer
put            :argument
set            :right
put            :argument
set            :left
put            :argument
reference      :a
put            :left
put            :1
add            :
set            :left
label          :insertionsort_for1
put            :left
put            :right
compare        :
jumpgreater    :insertionsort_for1_end
put            :a<left>
set            :temp
put            :left
set            :i
label          :insertionsort_while1
put            :i
put            :0
compare        :
jumpequal      :insertionsort_while1_end
put            :i
put            :1
subtract       :
set            :iminus1
put            :temp
put            :a<iminus1>
compare        :
jumpequal      :insertionsort_while1_end
jumpgreater    :insertionsort_while1_end
put            :a<iminus1>
set            :a<i>
put            :i
put            :1
subtract       :
set            :i
jump           :insertionsort_while1
label          :insertionsort_while1_end
put            :temp
set            :a<i>
put            :left
put            :1
add            :
set            :left
jump           :insertionsort_for1
label          :insertionsort_for1_end
return         :


comment        :This function just gets the quicksort
comment        :function started.

function       :main
put            :32
set            :a<0>
put            :31
set            :a<1>
put            :30
set            :a<2>
put            :29
set            :a<3>
put            :28
set            :a<4>
put            :27
set            :a<5>
put            :26
set            :a<6>
put            :25
set            :a<7>
put            :24
set            :a<8>
put            :23
set            :a<9>
put            :22
set            :a<10>
put            :21
set            :a<11>
put            :20
set            :a<12>
put            :19
set            :a<13>
put            :18
set            :a<14>
put            :17
set            :a<15>
put            :16
set            :a<16>
put            :15
set            :a<17>
put            :14
set            :a<18>
put            :13
set            :a<19>
put            :12
set            :a<20>
put            :11
set            :a<21>
put            :10
set            :a<22>
put            :9
set            :a<23>
put            :8
set            :a<24>
put            :7
set            :a<25>
put            :6
set            :a<26>
put            :5
set            :a<27>
put            :4
set            :a<28>
put            :3
set            :a<29>
put            :2
set            :a<30>
put            :1
set            :a<31>
put            :a
put            :0
put            :31
call           :quicksort
return         :'OK
